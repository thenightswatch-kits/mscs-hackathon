//@ts-nocheck
import Head from 'next/head'
import Image from 'next/image'
import { Inter } from 'next/font/google'
import styles from '@/styles/Home.module.css'
import Navbar from '../components/Navbar'
import Footer from '../components/Footer'
import { Grid, GridItem, Spacer, Text, Heading } from '@chakra-ui/react'
// import data from '../data/data';
import BarChart from '../components/DashBC'
import DonutChart from '../components/DashDC'
import { DashRecent } from '../components/DashRecent'
import { DashMonthly } from '../components/DashMonthly'
import CustomAngleCircleChart from '../components/DashSector'
import { getFirestore, collection, getDocs } from "firebase/firestore";
const inter = Inter({ subsets: ['latin'] })
import ChatBot from '@/components/ChatBot'
import firebase_app from '../../firebase/config'
import { GetServerSideProps, NextPage } from 'next';

interface Data {
  id: string;
  name: string;
  address: string;
  state: string;
  district: string;
  data_of_registration: string;
  area_of_operation: string;
  sector: string;
}

interface MyPageProps {
  data: Data[];
}

export default function Home({data}){
  
  //Counts the societies in data
  const states: any[] = [];
  const stateCount: any = {};
  for (const obj of data) {
    const state = obj.state.toUpperCase();

    // Store state names in an array
    if (!states.includes(state)) {
      states.push(state);
    }

    // Count the occurrences of each state
    if (stateCount[state]) {
      stateCount[state]++;
    } else {
      stateCount[state] = 1;
    }
  }
  // -----------------------------------------------------------------------

  //Calculate the count by year
  const countByYear = data.reduce((acc: any, obj) => {
    const year = obj.data_of_registration.split('/')[2];
    if (year) {
      acc[year] = (acc[year] || 0) + 1;
    }
    return acc;
  }, {});
  //------------------------------------------------------------------------

  //Get the latest Socities
  const sorted_data = data.sort((a, b): any => new Date(b.data_of_registration).getTime() - new Date(a.data_of_registration).getTime())
  //------------------------------------------------------------------------
  // Get the Monthly stats

  interface RegistrationData {
    id: string;
    name: string;
    address: string;
    state: string;
    district: string;
    date_of_registration: string;
    area_of_operation: string;
    sector: string;
  }



  // Create an object to store the registration counts per year
  const monthlyCounts: any = {};
  const years = Array.from(new Set(data.map(item => new Date(item.data_of_registration).getFullYear())));
  // Iterate over the data and process the date_of_registration field
  data.forEach(item => {
    const month = item.data_of_registration.split('/')[1]
    const year = item.data_of_registration.split('/')[2]
    if (!monthlyCounts[year]) {
      monthlyCounts[year] = {};
    }
    if (!monthlyCounts[year][month]) {
      monthlyCounts[year][month] = 0;
    }
    monthlyCounts[year][month]++
  });

  const currentYear = new Date().getFullYear();
  for (let year = 2016; year <= currentYear; year++) {
    if (!monthlyCounts[year]) {
      monthlyCounts[year] = {};
    }

    for (let month = 0; month < 12; month++) {
      let monthf: any = String(month)
      if (month < 10) {
        monthf = '0' + monthf
      }
      if (!monthlyCounts[year][monthf]) {
        monthlyCounts[year][monthf] = 0;
      }
    }
  }


  //Count the sectors
  const sectorCount: Record<string, number> = {};

  data.forEach(item => {
    if (sectorCount[item.sector]) {
      sectorCount[item.sector]++;
    } else {
      sectorCount[item.sector] = 1;
    }
  });

  const sortedSectorCount: [string, number][] = Object.entries(sectorCount)
    .sort(([, countA], [, countB]) => countB - countA);

  const topFiveSectors: string[] = sortedSectorCount.slice(0, 5).map(([sector]) => sector);
  const topFiveSectorCounts: number[] = sortedSectorCount.slice(0, 5).map(([, count]) => count);



  return (
    <>
      <Head>
        <title>Dashboard</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="https://mscs.dac.gov.in/images/favicon.gif" />
      </Head>
      <main className={`${styles.main} ${inter.className}`}>
        <Navbar children={undefined} />
        <Grid
          h='auto'
          w='auto'
          marginLeft={{ base: 0, md: 60 }}
          templateRows={{ base: 'repeat(1, 1fr)', md: 'repeat(2, 1fr)' }}
          templateColumns={{ base: 'repeat(1, 1fr)', md: 'repeat(3, 1fr)' }}
          gap='0.5'
          bgColor={'#CBD5E0'}
        >
          {/* Displays the Bar Chart */}
          <GridItem colSpan={{ base: 1, md: 2 }} display={'flex'} flexDirection={'column'} width={'100%'} justifyContent={'flex-start'} padding={5} bgColor={'white'}>
            <Heading size='md'>State-wise Distribution</Heading>
            <Text alignSelf={'start'}>Societies in all the states</Text>
            <br></br>
            <BarChart vdata={stateCount} />
          </GridItem>

          {/* Displays the Donut */}
          <GridItem display={'flex'} colSpan={1} p={5} alignItems={'center'} justifyContent={'flex-start'} flexDirection={'column'} bgColor={'white'}>
            <Heading alignSelf={'start'} size='md'>Yearly Registrations</Heading>
            <Text alignSelf={'start'}>From 2016 to {currentYear}</Text>
            <br></br>
            <br></br>
            <DonutChart countByYear={countByYear} />
          </GridItem>

          <GridItem colSpan={1} display={'flex'} flexDirection={'column'} p={10} justifyContent={'space-evenly'} bgColor={'white'}>
            <Heading size='md'>Top Sector Types</Heading>
            <Text alignSelf={'start'}>Top Five Sectors from 2016 to {currentYear}</Text>
            <br></br>
            <CustomAngleCircleChart sectors={topFiveSectors} counts={topFiveSectorCounts} />
          </GridItem>
          <GridItem colSpan={1} bgColor={'white'}>
            <DashRecent sorted_data={sorted_data} />
          </GridItem>
          <GridItem colSpan={1} display={'flex'} flexDirection={'column'} p={10} justifyContent={'space-evenly'} bgColor={'white'} >
          <Heading size='md'>Monthly Registrations</Heading>
            <Text alignSelf={'start'}>Monthly registrations {currentYear - 2} vs  {currentYear - 1}</Text>
            <br></br>
            <DashMonthly monthlyCounts={monthlyCounts} />
          </GridItem>
        </Grid>
        <Footer />
      </main>
    </>
  )
}


export const getServerSideProps = async () => {
  const db = getFirestore(firebase_app);
  try {
    const querySnapshot = await getDocs(collection(db, "mscs"));
    const data = querySnapshot.docs.map((doc) => doc.data());
    return {
      props: {
        data,
      },
    };
  } catch (error) {
    console.error('Error fetching data:', error);

    return {
      props: {
        data: [],
      },
    };
  }
}